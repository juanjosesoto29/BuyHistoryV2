import type { ViteDevServer } from 'vite';
import type { DiFactory } from '../types/diFactory';
import type { Config, Logger } from '../types/karma';
export interface ViteProvider extends Promise<ViteDevServer> {
    /**
     * value is undefined when the dependent is framework factory type
     */
    value: ViteDevServer | undefined;
}
export interface Executor {
    schedule: () => void;
}
export interface ViteDevServerInternal extends Omit<ViteDevServer, 'restart'> {
    restart: (forceOptimize?: boolean) => Promise<ViteDevServerInternal | undefined>;
    _forceOptimizeOnRestart: boolean;
    _restartPromise?: Promise<ViteDevServerInternal | undefined>;
}
declare const viteServerFactory: DiFactory<[
    config: Config,
    executor: Executor,
    logger: Logger
], ViteProvider>;
export default viteServerFactory;
