import type { ViteDevServer, Connect } from 'vite';
import type { Config, Logger } from './types/karma';
import type { ViteProvider, Executor } from './factory/viteServerFactory';
import type { DiFactory } from './types/diFactory';
import type { KarmaViteConfig } from './type';
declare const _default: {
    readonly 'framework:vite': readonly ["factory", DiFactory<[vite: ViteProvider, config: Config], ViteProvider>];
    readonly 'middleware:vite': readonly ["factory", DiFactory<[vite: ViteDevServer | undefined, config: Config, logger: Logger], Connect.Server>];
    readonly 'middleware:vite-before': readonly ["factory", DiFactory<[vite: ViteDevServer | undefined, config: Config, logger: Logger], Connect.NextHandleFunction>];
    readonly vite: readonly ["factory", DiFactory<[config: Config, executor: Executor, logger: Logger], ViteProvider>];
};
export = _default;
declare module 'karma' {
    interface ConfigOptions {
        vite?: KarmaViteConfig;
    }
}
